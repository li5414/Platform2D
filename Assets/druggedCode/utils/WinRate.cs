// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace druggedcode
{
    public struct WinRate
    {
        int _victory;
        int _lose;
        int _draw;
        int _total;

        public WinRate(int victory, int lose, int draw)
        {
            _victory = victory;
            _lose = lose;
            _draw = draw;
            _total = _victory + _lose + _draw;
        }

        public int AddVictory(int num = 1)
        {
            _victory += num;
            _total += num;

            return _victory;
        }

        public int AddLose(int num = 1)
        {
            _lose += num;
            _total += num;

            return _lose;
        }

        public int AddDraw(int num = 1)
        {
            _draw += num;
            _total += num;

            return _draw;
        }

        public void Reset()
        {
            _victory = 0;
            _lose = 0;
            _draw = 0;
            _total = 0;
        }


        public override string ToString()
        {
            return string.Format("[WinningRate: victory={0},lose={1},draw={2}total={3}, rate={4}]", _victory, _lose, _draw, _total, rate);
        }
        //        static public void RandomExecute( params UnityAction[] funcs )
        //        {

        public string GetRecord(string win = "Win", string lose = "Lose", string draw = "Draw")
        {
            return string.Format(_victory + "{0} " + _lose + "{1} " + _draw + "{2}", win, lose, draw);
        }

        public int victory
        {
            get { return _victory; }
        }

        public int lose
        {
            get { return _lose; }
        }

        public int draw
        {
            get { return _draw; }
        }


        public int total
        {
            get
            {
                return _total;
            }
        }

        public float rate
        {
            get
            {
                Debug.Log("Rate! total :  " + _total + "victory: " + _victory + " res : " + ((float)_victory / _total));
                if (_total <= 0)
                    return 0;
                else
                {
                    return (float)_victory / _total * 100f;
                }
            }
        }

        public static WinRate operator +(WinRate rate1, WinRate rate2)
        {
            return new WinRate(rate1.victory + rate2.victory, rate1.lose + rate2.lose, rate1.draw + rate2.draw);
        }
    }
}

